interface PaymentCode {
  code: string;
  orderId: string;
  amount: number;
  customerInfo: {
    name: string;
    surname: string;
    phone: string;
    email: string;
  };
  expiresAt: Date;
  status: "pending" | "paid" | "expired" | "cancelled";
  createdAt: Date;
}

// Stockage temporaire en m√©moire (en production, utiliser une base de donn√©es)
const paymentCodes = new Map<string, PaymentCode>();

export class PaymentCodeService {
  // G√©n√©rer un code unique de 8 caract√®res alphanum√©riques
  private generateCode(): string {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let code = "";
    for (let i = 0; i < 8; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
  }

  // Cr√©er un nouveau code de paiement
  createPaymentCode(
    orderId: string,
    amount: number,
    customerInfo: PaymentCode["customerInfo"],
  ): PaymentCode {
    let code = this.generateCode();

    // S'assurer que le code est unique
    while (paymentCodes.has(code)) {
      code = this.generateCode();
    }

    const now = new Date();
    const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24 heures

    const paymentCode: PaymentCode = {
      code,
      orderId,
      amount,
      customerInfo,
      expiresAt,
      status: "pending",
      createdAt: now,
    };

    paymentCodes.set(code, paymentCode);

    console.log(`üí≥ Code de paiement cr√©√©: ${code} pour commande ${orderId}`);

    return paymentCode;
  }

  // R√©cup√©rer un code de paiement
  getPaymentCode(code: string): PaymentCode | null {
    const paymentCode = paymentCodes.get(code);

    if (!paymentCode) {
      return null;
    }

    // V√©rifier si le code a expir√©
    if (
      new Date() > paymentCode.expiresAt &&
      paymentCode.status === "pending"
    ) {
      paymentCode.status = "expired";
      paymentCodes.set(code, paymentCode);
    }

    return paymentCode;
  }

  // Confirmer un paiement
  confirmPayment(code: string): boolean {
    const paymentCode = paymentCodes.get(code);

    if (!paymentCode || paymentCode.status !== "pending") {
      return false;
    }

    if (new Date() > paymentCode.expiresAt) {
      paymentCode.status = "expired";
      paymentCodes.set(code, paymentCode);
      return false;
    }

    paymentCode.status = "paid";
    paymentCodes.set(code, paymentCode);

    console.log(`‚úÖ Paiement confirm√© pour le code: ${code}`);

    return true;
  }

  // Annuler un code de paiement
  cancelPaymentCode(code: string): boolean {
    const paymentCode = paymentCodes.get(code);

    if (!paymentCode || paymentCode.status !== "pending") {
      return false;
    }

    paymentCode.status = "cancelled";
    paymentCodes.set(code, paymentCode);

    console.log(`‚ùå Code de paiement annul√©: ${code}`);

    return true;
  }

  // Nettoyer les codes expir√©s (√† ex√©cuter p√©riodiquement)
  cleanupExpiredCodes(): number {
    const now = new Date();
    let cleanedCount = 0;

    for (const [code, paymentCode] of paymentCodes.entries()) {
      if (paymentCode.status === "pending" && now > paymentCode.expiresAt) {
        paymentCode.status = "expired";
        paymentCodes.set(code, paymentCode);
        cleanedCount++;
      }
    }

    console.log(`üßπ ${cleanedCount} codes de paiement expir√©s nettoy√©s`);

    return cleanedCount;
  }

  // Obtenir le temps restant en millisecondes
  getTimeRemaining(code: string): number {
    const paymentCode = paymentCodes.get(code);

    if (!paymentCode || paymentCode.status !== "pending") {
      return 0;
    }

    const now = new Date();
    const remaining = paymentCode.expiresAt.getTime() - now.getTime();

    return Math.max(0, remaining);
  }

  // Formater les instructions de paiement
  formatPaymentInstructions(paymentCode: PaymentCode): string {
    const timeRemaining = this.getTimeRemaining(paymentCode.code);
    const hoursRemaining = Math.floor(timeRemaining / (1000 * 60 * 60));
    const minutesRemaining = Math.floor(
      (timeRemaining % (1000 * 60 * 60)) / (1000 * 60),
    );

    return `üí≥ *INSTRUCTIONS DE PAIEMENT*

üî¢ *Code de paiement :* ${paymentCode.code}
üí∞ *Montant :* ${paymentCode.amount.toFixed(2)} MAD
‚è∞ *Expire dans :* ${hoursRemaining}h ${minutesRemaining}min

üìç *AGENCES ACCEPT√âES :*
‚Ä¢ CashPlus
‚Ä¢ WafaCash  
‚Ä¢ Barid Cash (Poste Maroc)
‚Ä¢ AttijariCash

üìã *PROC√âDURE :*
1. Rendez-vous dans une agence
2. Donnez le code : ${paymentCode.code}
3. Payez ${paymentCode.amount.toFixed(2)} MAD
4. Conservez votre re√ßu

‚ö†Ô∏è *IMPORTANT :*
‚Ä¢ Code valable 24h uniquement
‚Ä¢ Paiement int√©gral requis
‚Ä¢ Commande annul√©e si non pay√© √† temps

Client : ${paymentCode.customerInfo.surname} ${paymentCode.customerInfo.name}
T√©l√©phone : ${paymentCode.customerInfo.phone}`;
  }

  // Obtenir les statistiques des codes
  getStats(): {
    total: number;
    pending: number;
    paid: number;
    expired: number;
    cancelled: number;
  } {
    const stats = {
      total: paymentCodes.size,
      pending: 0,
      paid: 0,
      expired: 0,
      cancelled: 0,
    };

    for (const paymentCode of paymentCodes.values()) {
      stats[paymentCode.status]++;
    }

    return stats;
  }
}

// Export d'une instance singleton
export const paymentCodeService = new PaymentCodeService();

// Nettoyer automatiquement les codes expir√©s toutes les heures
setInterval(
  () => {
    paymentCodeService.cleanupExpiredCodes();
  },
  60 * 60 * 1000,
);
